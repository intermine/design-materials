<?xml version="1.0"?>
<!-- -*- DocBook -*- -->

<article>

<artheader>
<date>2003-2-18</date>
<title>Sequence Ontology thoughts</title>
<authorgroup>
<author>
<firstname>Gos</firstname>
<surname>Micklem</surname>
</author>
</authorgroup>
</artheader>

<sect1>
<title>Sequence Ontology/Chado</title>

<para>The Chado schema models entities at or close to the top of the
sequence ontology, and then makes use of the ontology to constrain
what entities are attached to each other through the "part_of" and
"is" relationships that are allowed.  It appears not to have any
cardinality constraints (e.g. 0..*, 1..1 relationships).  Doesn't this
mean, when applying terms, that a lot of the logic and checking has to
be dealt with in external code?  i.e. The sequence ontology errs on
the side of providing too lax constraints?  Would it be that hard to
add cardinality constraints and would this be sufficient to define   
more precisely the allowed paths of annotation?  Is there/ might there
be a need for a series of annotation templates that are consistent
with the SO but which define the annotation (and cardinality) required
for a "complete" annotation of a given entity (e.g. gene)?</para>

<para>Transitive closure (see * below) of ontologies gets around the need
for recursive queries across ontologies.  Agreed that this makes it
simple to pull out all objects with a particular term or a more
specific one: e.g. requesting "exon" also pulls out things without an
explicit "exon" annotation but with the more specific "3' exon".
(This would be easier to maintain and more space efficient than the
alternative of expanding the annotation of an object carrying "3'
exon" to include "exon" and the other parent terms too.)  Agreed that
transitive closure fits well with FlyMine query optimisation.</para>

<para>The Chado schema models entities at or close to the top of the
sequence ontology.  In basing the FlyMine schema loosely on Chado we
could choose to model entities at lower levels too if we wished.  On
the other hand we could also use an object model at the higher levels
and just make use of the lower levels a) as a way of defining the UI
and b) as a way of defining a (large) set of possible pre-joins: in
principle we can instantiate all the levels.  In the extreme, for an
ontology in the form of a binary tree, this would take O(N x #levels
in ontology) more storage than the normalised data, and could end up
with O(2^#levels) of different classes: this doesn't sound so bad...</para>

<para>The benefit of the FlyMine approach is that we can remain flexible
about how general the object model is, and can choose to generate
pre-joins or not to represent more specific classes as determined by
querying demand.  Also object view is better for UI than having users
deal with schema details.</para>


<sect2>
<title>Wider issues</title>

<para>If one were to take this approach there would need to be ontologies
for every domain we are interested in.  These should come and if they
don't then it wouldn't be too hard to generate one ourselves.</para>

<para>Anotation depth: we can't guarantee that all data will be annotated
with the full depth of any given ontology.  For instance annotated
genomic sequence might just provide "coding" exons and by inference 5'
and 3' exons.  We ought to mark such objects to indicate that they are
not fully annotated, and ultimately should lobby for deeper
annotation.  Benefit of an ontology driven approach: it separates the
content of the annotation from any customised structure of the
underlying database.</para>

<para>* Transitive closure: Ontologies are represented as directed acyclic
graphs (DAGs) and any node can have many direct descendents which in
turn can have further descendents.  By making the transitive closure
the structure of the DAG is flattened into a single layer of
relationships where for each node there is a separate child entry for
each of its descendents, not just the direct ones.  This makes it
possible in one step to request all the descendents of a particular
node and thus all the objects they annotate.  In this way one can
easily query for all objects that are in effect annotated with a
particular term even though the actual annotation applied is a more
specific term, the existence of which implies the less specific one.</para>

<para>We should look at the BioJava object model which is currently under
review.  It is somewhat sequence centric but could be good as a
reality check.  It would be very good to be able easily to populate
BioJava objects from FlyMine.</para>
</sect2>
</sect1>
</article>
