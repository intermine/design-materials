<?xml version="1.0"?>

<article>

<artheader>
<date>2002-8-7</date>
<title>ISMB 2002</title>
<authorgroup>
<author>
<firstname>Andrew</firstname>
<surname>Varley</surname>
</author>
</authorgroup>
</artheader>

<sect1>
<title>Introduction</title>
<para>This document is a report on other projects either similar to
FlyMine, or that could be of some use to FlyMine, based on information
given at ISMB 2002.</para>
</sect1>

<sect1>
<title>MOBY</title>
<ulink url="http://www.biomoby.org" />

<para>The Moby project is an open-source initiative, based in Canada,
that is aiming to provide a central registry of servers that serve up
biological objects. All objects are referenced by a triple:
(namespace, type, id). The MOBY-Central server records where you can
go from each object to related objects. There is a MOBY object model,
and the objects can have cross-references to alternate ID systems, for
example genbank_id, ensemble_id, etc. By building a client, you can
navigate across all these servers following a trail of objects.</para>

<para>So for example, say you start with a sequence object. Query
MOBY-Central and ask "what is related to a sequence". MOBY-Central
replies: "cgi.ensembl.org will give you annotation objects,
www.arrayexpress.org will give you ......, etc". Pull objects from one
of those servers, and repeat for as long as you need. Every navigation
requires a call to MOBY-Central. As far as I can see there is no way
of doing proper queries on other than by object ID. Plus, everything
has to be pulled back to the client for filtering if the query needs
objects from more than one server, or even if you need to do a sort on
one type of object. I can see that for large queries, say a join of
many thousand of objects from two different servers with a "where"
clause, would be very inefficient.</para>

<para>For browsing around objects I can see that MOBY will catch on
and it would not be too difficult for FlyMine to serve up objects
using the MOBY system - all you would need is a servlet, similar to
DAS, and register objects/relationships on MOBY-Central. We should
keep up to date with the development of Moby.</para>

</sect1>

<sect1>
<title>MAGEstk</title>
<ulink url="http://mged.sourceforge.net" />


<para>Reads an XMI model and outputs Java, Perl, C++ objects and (I
think) database creation SQL scripts. Also XML
marshalling/unmarshalling. No (as yet) database mapping.</para>

<para>This is very similar to code in ArgoUML, but does not use this,
nor the Novosoft UML library. The development plan is to create a
whole mapping system (like Castor). It is not clear why they are doing
this and not using one of the existing open-source mapping
projects. Although called MAGEstk, it is not limited to the MAGE model
and is quite general (though the source code has MAGE-specific stuff
in - will need to investigate). It was said that ArrayExpress are
using this tool - this is contrary to what Ugis said when we talked
with him a few weeks ago.</para>

<para>This project is worth keeping an eye on. At the present stage it
is not sufficient for our needs, and is certainly not the only
solution out there.</para>

</sect1>

<sect1><title>IBM</title>

<para>IBM are "incorporating XML into DB2/DiscoveryLink". What this
turns out to be is turning an XML document, on the fly, into
relational tables (basically one table for each object in the XML) and
querying this using standard XML. This is all still using the
DiscoveryLink federation model.</para>

<para>There is also a new tool called Clio that is a GUI for mapping
between different relational schemas. This effectively just does joins
under the covers. IBM seemed very reluctant to talk about
performance!!</para>

</sect1>


<sect1><title>GUS and derivatives (allgenes.org etc.)</title>
<ulink url="http://www.gusdev.org" />
<ulink url="http://www.cbil.upenn.edu" />

<para>A general schema and object model. Used as the basis of websites
such as allgenes.org. Also contains a pipeline, and the schema
contains a lot of stuff for audit trails through the pipeline. The
object model is in Perl (Java to come). Relational schema covers a lot
of similar concepts to the proposed FlyMine. The websites build on a
general core and are customised using a collection of XML files, which
basically define canned queries which are transformed into SQL.</para>

<para>Spoke at length with Steve Fisher (stevef@pcbi.upenn.edu) and he
was extremely keen to do some sort of collaboration. At a first glance
the schema part could be useful, even if just for ideas. I am not
convinced about the front end. It is not a generic query mechanism,
and may be a bit hacky. It may be worth spending a week or too looking
into it as if we could set up a simple FlyMine in a couple of months
it might give us a jump start to building up a user base while
developing what we want to.</para>

<para>Paul Mooney at Sanger Centre (pjm@sanger.ac.uk) is going to use
the GUS schema to set up some database. I spoke with him and he would
be willing to meet up to discuss.</para>

</sect1>

<sect1><title>GIMS</title>

<para>An object model and browsing GUI front end. Spoke to Mike
Cornell. Could not draw them into exactly what the model was. They use
an object database. Reckoned queries were quite fast, but admitted
that there is a lot of for loops to search through returned query sets
in Perl. Loaded from flat file dumps of database. Don't think that the
object model covers a huge amount.</para>

</sect1>

<sect1><title>Novartis internal project</title>

<para>EJB solution similar to proposed FlyMine. Front end servlets/JSP
talk to an API which sits on top of (and hides) EJB back end. The
whole system is a prototype and does not yet talk to a database. The
proposed database is a extended version of BioSQL. Queries are
assembled by a session bean and done directly in the database,
returning a set of IDs. These are then retrived as entitly beans, if
necessary. Looks like a well thought out system. They have not solved
the query caching problem - every query hits the database, even though
the entity beans are cached and will be retrieved from the cache. I
don't think that the query mechanism is very generic - there is a
specific JSP for each query (I think - there was only a simple one
implemented when I was shown on the laptop). Contact: David Block
(dblock@gnf.org) - seemed a nice guy. This may be released as open
source if and when the code is cleaned up and it outbeats OmniGene in
some respect. Will try and get copy of poster for later
reference.</para>

</sect1>

<sect1><title>OmniGene</title>

<para>Did not learn a lot more about this over and above what is on
the website. Did get the impression that they are a bit of a "we know
best and this is the best thing since sliced bread" group. Heavily
tied to DAS and Moby. Don't think that dynamic queries are supported,
and pretty sure it is more geared to browsing rather than
querying.</para>

</sect1>

<sect1><title>caBIO</title>
<ulink url="http://ncicb.nci.nih.gov/core" />

<para>An object model covering genome and cancer concepts. Did not
manage to speak to anyone on this project. Worth investigating
further. Uses MAGEstk.</para>

</sect1>

</article>
