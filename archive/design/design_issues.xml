<article>

<artheader>
<date>2002-5-17</date>
<title>Flymine - Design discussion</title>
<authorgroup>
<author>
<firstname>Gos</firstname>
<surname>Micklem</surname>
</author>
<author>
<firstname>Andrew</firstname>
<surname>Varley</surname>
</author>
</authorgroup>
</artheader>

<sect1>
<title>Observations</title>

<para>All other systems (DAS, SRS, Ensembl, ...) are very heavily sequence
based. We should aim for generality. ??Can all service-service queries
be represented by one of the following ??</para>

<itemizedlist>
	<listitem>Client provides:
		<itemizedlist>
		<listitem>object list</listitem>
		<listitem>annotation constraint list (= a query on annotation) [ note Filemaker paradigm for queries
				for UI but also for putting constraints on multiple copies of an
				object skeleton (note OQL/JDO/ODMG standards) ]</listitem>
		<listitem>operation on remote object set</listitem>
		</itemizedlist>
	</listitem>
	<listitem>Server provides:
	        <itemizedlist>
		<listitem>non-positional annotation</listitem>
		<listitem>positional annotation</listitem>
		<listitem>set of new objects +/- annotation</listitem>
		<listitem>a statement that object set is generated at the remote location, and ready to be operated on</listitem>
		</itemizedlist>
	</listitem>
</itemizedlist>

<para>To be that general a service must be able to advertise the objects it
works with and the form of the annotation it provides, and in addition
there must be a method of registering such standards. Basically, this
is metadata, as we understand it (see below).</para>

</sect1>

<sect1>
<title>Different approaches - 'cheap integration' or 'universal schema'??</title>

<sect2>
<title>cheap integration</title>

<para>This is the case where the code knows very little about the
data, just what fields can be linked between the different source
databases</para>

<programlisting>foreach (src db) {
	locally flatten -> few tables eg. a Genbank entry is one row of a table (extreme case)
	copy tables to central database
	index heavily
	create indexed links for pre-defined relationships between databases ie. pre-made joins
}</programlisting>

<itemizedlist>
<listitem>++ Easy to define links between datasources -> automatically define query interface</listitem>
<listitem>-- Difficult to generate objects/XML because that requires knowledge of what the data actually is</listitem>
<listitem>-- not all source databases use the same nomenclature and co-ordinate frames -> reduces query power</listitem>
</itemizedlist>

<para>Pain</para>
<itemizedlist>
<listitem>generating object loaders</listitem>
<listitem>flattening source databases</listitem>
</itemizedlist>

<para>There is the potential for order > n^2 join tables to allow joins between pairs of flattened databases.</para>

</sect2>

<sect2>
<title>universal schema: try to make a schema of everything ie. a non-redundant model</title>

<para>data is modelled explicitly in a object/schema model</para>

<itemizedlist>
<listitem>++ Easy object population</listitem>
<listitem>++ Good data normalisation</listitem>
<listitem>-- Need to deal up front with naming contentions and co-ordinate frame issues</listitem>
<listitem>++ We can use genral methods to make objects persist</listitem>
<listitem>++ Greater clarity in specifying obj->obj links and generating associated pre-joins for query efficiency</listitem>
<listitem>++ Allows object access, querying, and linking functionality to be generated from the specification automatically</listitem>
</itemizedlist>

<para>Pain</para>
<itemizedlist>
<listitem>generate (or incorporate) standard object model</listitem>
<listitem>write source specific loaders</listitem>
<listitem>work with providers to improve interfacing</listitem>
</itemizedlist>

<para>It may be difficult to deal with the datasource's own XML as often it
is unstable/undocumented. Better deal directly with the source
databases. Hopefully this situation will improve over the next year or
so???!! However, XML is very voluminous.</para>

<para>We realise we cannot do a perfect job dealing with naming, eg. it will
not be trivial to mark identical genes when importing 2 different
datasources.</para>

</sect2>
</sect1>

<sect1>
<title>Standards</title>

<itemizedlist>
<listitem>GO - XML-based gene function, location, role specification</listitem>
<listitem>GAME - XML sequence/annotation markup used by GadFly</listitem>
<listitem>BioJava</listitem>
<listitem>MAGE</listitem>
<listitem>PGE - protein equivalent of MAGE</listitem>
<listitem>AGAVE - popular sequence/annotaion transfer XML</listitem>
</itemizedlist>


<para>Metadata standards - do they exist? (We understand metadata to
be a description of the contents and access methods of entities stored
in a database).</para>

</sect1>

<sect1>
<title>Existing methods of integrating databases</title>

<itemizedlist>
<listitem>DiscoveryLink - a platform for integrating databases on the
SQL level. Basically, just makes the tables in the different databases
look as if they are in the same one.</listitem>
</itemizedlist>
</sect1>
</article>
